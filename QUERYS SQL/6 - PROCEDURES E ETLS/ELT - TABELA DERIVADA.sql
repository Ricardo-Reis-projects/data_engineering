CREATE  PROCEDURE dbo.PRC_SAMS_CARGA_FAT_VOCS AS 

BEGIN 

DECLARE @DATA_INICIAL DATE
	SET @DATA_INICIAL = (SELECT EOMONTH(DATEADD(MONTH,-13,MAX(DT_POSTING_DATE)))	FROM DB_SAMSUNG.DBO.TB_SAMS_VOCS)

IF OBJECT_ID('TEMPDB..#TMP_DATA_VOC') IS NOT NULL 
	DROP TABLE #TMP_DATA_VOC
IF OBJECT_ID('TEMPDB..#TMP_VOC_CIP') IS NOT NULL 
	DROP TABLE #TMP_VOC_CIP
IF OBJECT_ID('TEMPDB..#TMP_VOC_AUD') IS NOT NULL 
	DROP TABLE #TMP_VOC_AUD
IF OBJECT_ID('TEMPDB..#TMP_VOC_COURT') IS NOT NULL 
	DROP TABLE #TMP_VOC_COURT
IF OBJECT_ID('TEMPDB..#TMP_VOC_ACORDOS') IS NOT NULL 
	DROP TABLE #TMP_VOC_ACORDOS

SELECT 
	 NM_REF_TICKET
	,DT_POSTING_DATE	AS DT_DATA_VOC
	,DT_COMPLETE_DATE	AS DT_COMPLETE_DATE_VOC
	,NM_SERIAL_NO
INTO #TMP_DATA_VOC
FROM DB_SAMSUNG.DBO.TB_SAMS_VOCS_REPORT
WHERE NM_REF_TICKET = NM_TICKET_NO

SELECT 
	ROW_NUMBER() OVER(PARTITION BY A.[NM_REF_TICKET] ORDER BY A.[DT_POSTING_DATE] DESC) NR_POSICAO
	,A.[NM_REF_TICKET]
	,A.[NM_CLAIM_TYPE_DESC_1]
	,A.[NM_TICKET_NO]
	,A.[DT_POSTING_DATE]
	,DT_DATA_VOC
	,DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) AS NR_TAT
	,A.[NM_PROCESS_TYPE_DESC]
	,A.[NM_DETAIL_TYPE_2]
	,A.[NM_CLAIM_TYPE_DESC_2]
	,A.[NM_SERIAL_NO]
INTO #TMP_VOC_CIP
FROM [DB_SAMSUNG].[DBO].[TB_SAMS_VOCS_REPORT] A
LEFT JOIN  #TMP_DATA_VOC B
ON A.[NM_REF_TICKET] = B.[NM_REF_TICKET]
WHERE A.[NM_REF_TICKET] != A.[NM_TICKET_NO]
	AND A.NM_CLAIM_TYPE_DESC_2 = 'PROCON (CIP)'  
	AND DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) >=0
	AND A.[NM_SERIAL_NO] = B.[NM_SERIAL_NO]
ORDER BY A.[NM_REF_TICKET]

SELECT 
	ROW_NUMBER() OVER(PARTITION BY A.[NM_REF_TICKET] ORDER BY A.[DT_POSTING_DATE] DESC) NR_POSICAO
	,A.[NM_REF_TICKET]
	,A.[NM_CLAIM_TYPE_DESC_1]
	,A.[NM_TICKET_NO]
	,A.[DT_POSTING_DATE]
	,DT_DATA_VOC
	,DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) AS NR_TAT
	,A.[NM_PROCESS_TYPE_DESC]
	,A.[NM_DETAIL_TYPE_2]
	,A.[NM_CLAIM_TYPE_DESC_2]
	,A.[NM_SERIAL_NO]
INTO #TMP_VOC_AUD
FROM [DB_SAMSUNG].[DBO].[TB_SAMS_VOCS_REPORT] A
LEFT JOIN  #TMP_DATA_VOC B
ON A.[NM_REF_TICKET] = B.[NM_REF_TICKET]
WHERE A.[NM_REF_TICKET] != A.[NM_TICKET_NO]
	AND A.NM_CLAIM_TYPE_DESC_2 != 'PROCON (CIP)'  AND A.NM_CLAIM_TYPE_DESC_2 LIKE 'PROCON%'
	AND DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) >=0
	AND A.[NM_SERIAL_NO] = B.[NM_SERIAL_NO]
ORDER BY A.[NM_REF_TICKET]

SELECT 
	ROW_NUMBER() OVER(PARTITION BY A.[NM_REF_TICKET] ORDER BY A.[DT_POSTING_DATE] DESC) NR_POSICAO
	,A.[NM_REF_TICKET]
	,A.[NM_CLAIM_TYPE_DESC_1]
	,A.[NM_TICKET_NO]
	,A.[DT_POSTING_DATE]
	,DT_DATA_VOC
	,DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) AS NR_TAT
	,A.[NM_PROCESS_TYPE_DESC]
	,A.[NM_DETAIL_TYPE_2]
	,A.[NM_CLAIM_TYPE_DESC_2]
	,A.[NM_SERIAL_NO]
INTO #TMP_VOC_COURT
FROM [DB_SAMSUNG].[DBO].[TB_SAMS_VOCS_REPORT] A
LEFT JOIN  #TMP_DATA_VOC B
ON A.[NM_REF_TICKET] = B.[NM_REF_TICKET]
WHERE A.[NM_REF_TICKET] != A.[NM_TICKET_NO]
	AND A.NM_CLAIM_TYPE_DESC_2 LIKE 'COURT%'
	AND DATEDIFF(D, A.[DT_POSTING_DATE], B.DT_DATA_VOC) >=0
	AND A.[NM_SERIAL_NO] = B.[NM_SERIAL_NO]
ORDER BY A.[NM_REF_TICKET]

SELECT 
	 A.[NM_REF_TICKET]
	,A.[NM_CLAIM_TYPE_DESC_1]
	,A.[NM_TICKET_NO]
	,A.DT_COMPLETE_DATE
	,DT_DATA_VOC
	,DATEDIFF(D, A.[DT_POSTING_DATE], B.[DT_COMPLETE_DATE_VOC]) AS NR_TAT
	,A.[NM_PROCESS_TYPE_DESC]
	,A.[NM_DETAIL_TYPE_2]
	,A.[NM_CLAIM_TYPE_DESC_2]
	,A.[NM_SERIAL_NO]
INTO #TMP_VOC_ACORDOS
FROM [DB_SAMSUNG].[DBO].[TB_SAMS_VOCS_REPORT] A
LEFT JOIN  #TMP_DATA_VOC B
ON A.[NM_REF_TICKET] = B.[NM_REF_TICKET]
WHERE A.[NM_REF_TICKET] != A.[NM_TICKET_NO]
	AND NM_DETAIL_TYPE_2 IN ('EXCHANGE', 'COMPENSATION', 'REFUND')
	AND DATEDIFF(D, A.DT_COMPLETE_DATE, B.[DT_COMPLETE_DATE_VOC]) >=0
	AND A.[NM_SERIAL_NO] = B.[NM_SERIAL_NO]
ORDER BY A.[NM_REF_TICKET]

INSERT INTO DB_SAMSUNG.dbo.TB_FAT_SAMS_VOCS
(
	 NM_COMPARATIVO_COURT
	,NM_TRANSACTION_COURT
	,NM_COMPARATIVO_AUD
	,NM_TRANSACTION_AUD
	,NM_COMPARATIVO_CIP
	,NM_TRANSACTION_CIP
	,NR_TAT_FINALIZACAO
	,NM_ACORDO_COMPLETED_SOLUCTION
	,NM_ACORDO_AGREED_SOLUTION
	,NM_TRANSACTION_ID
	,DT_POSTING_DATE
	,DT_COMPLETE_DATE
	,NM_STATUS_T_1
	,NM_REASON_T
	,NM_PRODUCT_CATEGORY
	,NM_MODEL
	,NM_CLAIM_TYPE_I_T
	,NM_CLAIM_TYPE_II_T
	,NM_COMPLETED_SOLUTION_I_T
	,NM_COMPLETED_SOLUTION_II_T
	,NM_ROOT_CAUSE_T
	,NM_ASC_CODE_1
	,NM_TYPE_T
	,NM_CITY
	,NM_STATE
	,NM_COURT_NAME
	,NM_COURT_CITY
	,NM_SYMPTOM_1
	,NM_SYMPTOM_2
	,NM_SYMPTOM_3
	,NM_SERVICE_TYPE_T
	,NM_REQUIREMENT_T
	,NM_SOURCE_CHANNEL_T
	,NM_STATUS_REASON
	,NM_SERVICE_GRMS
	,NM_CRAICAO_GRMS
	,NM_GRUPO
)
SELECT
	 IIF(COURT.NM_CLAIM_TYPE_DESC_1 IS NULL,'-','COURT')	AS NM_COMPARATIVO_COURT
	,ISNULL(COURT.NM_TICKET_NO, '-')						AS NM_TRANSACTION_COURT	
	,IIF(AUD.NM_CLAIM_TYPE_DESC_1 IS NULL,'-','AUD')		AS NM_COMPARATIVO_AUD
	,ISNULL(AUD.NM_TICKET_NO, '-')							AS NM_TRANSACTION_AUD
	,IIF(CIP.NM_CLAIM_TYPE_DESC_1 IS NULL,'-','CIP')		AS NM_COMPARATIVO_CIP
	,ISNULL(CIP.NM_TICKET_NO, '-')							AS NM_TRANSACTION_CIP
	,ISNULL(DATEDIFF(DAY, VOC.DT_POSTING_DATE,VOC.DT_COMPLETE_DATE),'-') AS NR_TAT_FINALIZACAO
	,COMP.NM_ACORDO	AS NM_ACORDO_COMPLETED_SOLUCTION
	,AGRE.NM_ACORDO	AS NM_ACORDO_AGREED_SOLUTION
	,VOC.NM_TRANSACTION_ID
	,VOC.DT_POSTING_DATE
	,VOC.DT_COMPLETE_DATE
	,VOC.NM_STATUS_T_1
	,VOC.NM_REASON_T
	,VOC.NM_PRODUCT_CATEGORY
	,VOC.NM_MODEL
	,VOC.NM_CLAIM_TYPE_I_T
	,VOC.NM_CLAIM_TYPE_II_T
	,VOC.NM_COMPLETED_SOLUTION_I_T
	,VOC.NM_COMPLETED_SOLUTION_II_T
	,VOC.NM_ROOT_CAUSE_T
	,VOC.NM_ASC_CODE_1
	,VOC.NM_TYPE_T
	,VOC.NM_CITY
	,VOC.NM_STATE
	,VOC.NM_COURT_NAME
	,VOC.NM_COURT_CITY
	,VOC.NM_SYMPTOM_1
	,VOC.NM_SYMPTOM_2
	,VOC.NM_SYMPTOM_3
	,VOC.NM_SERVICE_TYPE_T
	,VOC.NM_REQUIREMENT_T
	,VOC.NM_SOURCE_CHANNEL_T
	,IIF(VOC.NM_STATUS_REASON IS NULL,REASON.NM_STATUS_REASON_NOVO,VOC.NM_STATUS_REASON)		AS NM_STATUS_REASON
	,ISNULL(IIF(VOC.NM_COMPLETED_SOLUTION_I_T IN ('Troca','Ressarcimento','Compensação'),ACORDOS.NM_TICKET_NO,'-'),'-')	AS NM_SERVICE_GRMS
	,CASE 
		WHEN (VOC.NM_COMPLETED_SOLUTION_I_T IN ('Troca','Ressarcimento','Compensação') AND ACORDOS.NM_REF_TICKET IS NOT NULL) THEN 'GRMS Criado'
		WHEN (VOC.NM_COMPLETED_SOLUTION_I_T IN ('Troca','Ressarcimento','Compensação') AND ACORDOS.NM_REF_TICKET IS NULL)		THEN 'GRMS NÃO Criado'
		ELSE '-'
	END	AS NM_CRAICAO_GRMS
	,CASE 
		WHEN VOC.NM_TYPE_T	= 'PROCON (CIP)'																	THEN 'PROCON CIP'
        WHEN VOC.NM_TYPE_T	= 'RECLAMAÇÃO GENÉRICA'																THEN 'SOLUTION' 
        WHEN VOC.NM_TYPE_T	= 'BUTLER'																			THEN 'SPECIAL HANDLING' 
        WHEN VOC.NM_TYPE_T	= 'PL (RESPONSABILIDADE DO PRODUTO)'												THEN 'PL' 
		WHEN VOC.NM_TYPE_T	= 'RECLAMAÇÃO VOC OFFICE'															THEN 'RECLAMAÇÃO VOC OFFICE' 
        WHEN VOC.NM_TYPE_T	= 'SENACON'																			THEN 'SENACON' 
        WHEN (VOC.NM_TYPE_T	= 'EXTRAJUDICIAL' AND VOC.NM_SOURCE_CHANNEL_T LIKE 'PROCON%')						THEN 'PROCON HOT LINE'
        WHEN (VOC.NM_TYPE_T = 'EXTRAJUDICIAL' AND VOC.NM_SOURCE_CHANNEL_T = 'ORGAO DO CONSUMIDOR')				THEN 'COURT HOT LINE'
        WHEN (VOC.NM_TYPE_T = 'EXTRAJUDICIAL' AND VOC.NM_SOURCE_CHANNEL_T = 'ESCRITÓRIO CENTRAL / CC VISIT')	THEN 'TOTEN D ACORDO HOT LINE'
        WHEN (VOC.NM_TYPE_T = 'IMPRENSA' AND VOC.NM_SOURCE_CHANNEL_T = 'CEO EMAIL')								THEN 'EXECUTIVE EMAIL'
        WHEN (VOC.NM_TYPE_T = 'IMPRENSA' AND VOC.NM_SOURCE_CHANNEL_T <> 'CEO EMAIL')							THEN 'MIDIA'
        WHEN VOC.NM_TYPE_T	= 'PROCON (AUD)'																	THEN 'PROCON AUD'
        WHEN VOC.NM_TYPE_T	 LIKE 'COURT%'																		THEN 'SMALL CLAIM COURT'
		ELSE VOC.NM_TYPE_T
	END AS NM_GRUPO
FROM DB_SAMSUNG.DBO.TB_SAMS_VOCS								AS VOC
LEFT JOIN DB_SAMSUNG.DBO.TB_DIM_SAMS_VOCS_SOLUTIONS				AS COMP
	ON VOC.NM_COMPLETED_SOLUTION_I = COMP.NR_ID_SOLUTION
LEFT JOIN DB_SAMSUNG.DBO.TB_DIM_SAMS_VOCS_SOLUTIONS				AS AGRE
	ON VOC.NM_AGREED_SOLUTION_I = AGRE.NR_ID_SOLUTION
LEFT JOIN DB_SAMSUNG.DBO.TB_DIM_SAMS_VOCS_STATUS_REASON			AS REASON
	ON VOC.NM_STATUS_REASON = REASON.NM_STATUS_REASON_ANTERIOR
LEFT JOIN #TMP_VOC_COURT AS COURT
	ON VOC.NM_TRANSACTION_ID = COURT.NM_REF_TICKET	AND COURT.NR_POSICAO = 1
LEFT JOIN #TMP_VOC_AUD AS AUD
	ON VOC.NM_TRANSACTION_ID = AUD.NM_REF_TICKET	AND AUD.NR_POSICAO = 1
LEFT JOIN #TMP_VOC_CIP AS CIP
	ON VOC.NM_TRANSACTION_ID = CIP.NM_REF_TICKET	AND CIP.NR_POSICAO = 1
LEFT JOIN #TMP_VOC_ACORDOS	AS ACORDOS
	ON VOC.NM_TRANSACTION_ID = ACORDOS.NM_REF_TICKET
WHERE VOC.DT_POSTING_DATE > @DATA_INICIAL OR VOC.DT_COMPLETE_DATE > @DATA_INICIAL
END;